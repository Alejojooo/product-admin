package com.enpresa.productadmin.vistas.gui;

import com.enpresa.productadmin.modelo.dto.ClaveDTO;
import com.enpresa.productadmin.vistas.EntradaUsuario;
import com.enpresa.productadmin.vistas.MapearAccion;
import com.enpresa.productadmin.vistas.VistaGraficaConNotificador;
import java.awt.event.ActionEvent;
import java.util.function.Function;

/**
 *
 * @author jmdub
 */
public class CambiarClaveVista extends VistaGraficaConNotificador implements MapearAccion, EntradaUsuario {

    /**
     * Creates new form CambiarPassword
     */
    public CambiarClaveVista() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnConfirmar = new javax.swing.JButton();
        txtClaveConfirmacion = new javax.swing.JPasswordField();
        txtClaveNueva = new javax.swing.JPasswordField();
        txtClaveActual = new javax.swing.JPasswordField();

        setMaximumSize(new java.awt.Dimension(523, 236));
        setMinimumSize(new java.awt.Dimension(523, 236));
        setPreferredSize(new java.awt.Dimension(523, 236));
        setLayout(null);

        jLabel1.setText("Contraseña actual:");
        jLabel1.setPreferredSize(new java.awt.Dimension(111, 21));
        add(jLabel1);
        jLabel1.setBounds(16, 44, 111, 21);

        jLabel2.setText("Nueva contraseña:");
        jLabel2.setPreferredSize(new java.awt.Dimension(111, 21));
        add(jLabel2);
        jLabel2.setBounds(16, 108, 111, 21);

        jLabel3.setText("Confirmar contraseña:");
        jLabel3.setPreferredSize(new java.awt.Dimension(131, 21));
        add(jLabel3);
        jLabel3.setBounds(16, 172, 131, 21);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("<html> <p>Las contraseñas deben tener como mínimo:  <br>     - 10 caracteres de longitud.  <br>     - Un número.  <br>     - Un carácter especial (!@#$, entre otros).</p> </html>");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel5.setMaximumSize(new java.awt.Dimension(275, 70));
        jLabel5.setMinimumSize(new java.awt.Dimension(275, 70));
        jLabel5.setPreferredSize(new java.awt.Dimension(275, 70));
        jLabel5.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        add(jLabel5);
        jLabel5.setBounds(232, 44, 275, 70);

        btnConfirmar.setText("Confirmar");
        btnConfirmar.setPreferredSize(new java.awt.Dimension(100, 30));
        add(btnConfirmar);
        btnConfirmar.setBounds(320, 128, 100, 30);
        add(txtClaveConfirmacion);
        txtClaveConfirmacion.setBounds(16, 193, 200, 27);
        add(txtClaveNueva);
        txtClaveNueva.setBounds(16, 129, 200, 27);
        add(txtClaveActual);
        txtClaveActual.setBounds(16, 65, 200, 27);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField txtClaveActual;
    private javax.swing.JPasswordField txtClaveConfirmacion;
    private javax.swing.JPasswordField txtClaveNueva;
    // End of variables declaration//GEN-END:variables

    @Override
    public ClaveDTO obtenerCampos() {
        ClaveDTO campos = new ClaveDTO();
        
        campos.setClaveActual(obtenerClave(txtClaveActual.getPassword()));
        campos.setClaveNueva(obtenerClave(txtClaveNueva.getPassword()));
        campos.setClaveConfirmacion(obtenerClave(txtClaveConfirmacion.getPassword()));

        limpiarCampos();
        return campos;
    }
    
    private String obtenerClave(char[] clave) {
        String claveString = "";
        for (int i = 0; i < clave.length; i++) {
            claveString += clave[i];
            clave[i] = 0;
        }
        return claveString;
    }
    
    private void limpiarCampos() {
        txtClaveActual.setText("");
        txtClaveNueva.setText("");
        txtClaveConfirmacion.setText("");
    }

    @Override
    public void mapearAccion(String accion, Function funcion) {
        switch (accion) {
            case "Confirmar" -> {
                btnConfirmar.addActionListener((ActionEvent e) -> {
                    funcion.apply(null);
                });
            }
            default -> {
                mostrarError("Operacion no soportada.");
            }
        }
    }

}
